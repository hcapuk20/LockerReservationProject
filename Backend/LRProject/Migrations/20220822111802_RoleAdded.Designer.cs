// <auto-generated />
using System;
using LRProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LRProject.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220822111802_RoleAdded")]
    partial class RoleAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.7.22376.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LRProject.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LRProject.Models.EmployeeSource", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUser")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DeletedByUser")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUser")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "SourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("EmployeeSources");
                });

            modelBuilder.Entity("LRProject.Models.EmployeeSourceGroup", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SourceGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUser")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DeletedByUser")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUser")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "SourceGroupId");

                    b.HasIndex("SourceGroupId");

                    b.ToTable("EmployeeSourcesGroups");
                });

            modelBuilder.Entity("LRProject.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SourceGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Space")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceGroupId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("LRProject.Models.SourceGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SourceGroups");
                });

            modelBuilder.Entity("LRProject.Models.EmployeeSource", b =>
                {
                    b.HasOne("LRProject.Models.Employee", "Employee")
                        .WithMany("EmployeeSources")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LRProject.Models.Source", "Source")
                        .WithMany("EmployeeSources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("LRProject.Models.EmployeeSourceGroup", b =>
                {
                    b.HasOne("LRProject.Models.Employee", "Employee")
                        .WithMany("EmployeeSourceGroups")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LRProject.Models.SourceGroup", "SourceGroup")
                        .WithMany("EmployeeSourceGroups")
                        .HasForeignKey("SourceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("SourceGroup");
                });

            modelBuilder.Entity("LRProject.Models.Source", b =>
                {
                    b.HasOne("LRProject.Models.SourceGroup", "SourceGroup")
                        .WithMany("Sources")
                        .HasForeignKey("SourceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceGroup");
                });

            modelBuilder.Entity("LRProject.Models.Employee", b =>
                {
                    b.Navigation("EmployeeSourceGroups");

                    b.Navigation("EmployeeSources");
                });

            modelBuilder.Entity("LRProject.Models.Source", b =>
                {
                    b.Navigation("EmployeeSources");
                });

            modelBuilder.Entity("LRProject.Models.SourceGroup", b =>
                {
                    b.Navigation("EmployeeSourceGroups");

                    b.Navigation("Sources");
                });
#pragma warning restore 612, 618
        }
    }
}
